"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/re-resizable@6.9.11_react-dom@18.2.0_react@18.2.0";
exports.ids = ["vendor-chunks/re-resizable@6.9.11_react-dom@18.2.0_react@18.2.0"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/re-resizable@6.9.11_react-dom@18.2.0_react@18.2.0/node_modules/re-resizable/lib/index.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/re-resizable@6.9.11_react-dom@18.2.0_react@18.2.0/node_modules/re-resizable/lib/index.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Resizable: () => (/* binding */ Resizable)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/.pnpm/next@14.0.4_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/.pnpm/next@14.0.4_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _resizer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./resizer */ \"(ssr)/./node_modules/.pnpm/re-resizable@6.9.11_react-dom@18.2.0_react@18.2.0/node_modules/re-resizable/lib/resizer.js\");\nvar __extends = undefined && undefined.__extends || function() {\n    var extendStatics = function(d, b) {\n        extendStatics = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(d, b) {\n            d.__proto__ = b;\n        } || function(d, b) {\n            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n        };\n        return extendStatics(d, b);\n    };\n    return function(d, b) {\n        extendStatics(d, b);\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n}();\nvar __assign = undefined && undefined.__assign || function() {\n    __assign = Object.assign || function(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\n\n\n\nvar DEFAULT_SIZE = {\n    width: \"auto\",\n    height: \"auto\"\n};\nvar clamp = function(n, min, max) {\n    return Math.max(Math.min(n, max), min);\n};\nvar snap = function(n, size) {\n    return Math.round(n / size) * size;\n};\nvar hasDirection = function(dir, target) {\n    return new RegExp(dir, \"i\").test(target);\n};\n// INFO: In case of window is a Proxy and does not porxy Events correctly, use isTouchEvent & isMouseEvent to distinguish event type instead of `instanceof`.\nvar isTouchEvent = function(event) {\n    return Boolean(event.touches && event.touches.length);\n};\nvar isMouseEvent = function(event) {\n    return Boolean((event.clientX || event.clientX === 0) && (event.clientY || event.clientY === 0));\n};\nvar findClosestSnap = function(n, snapArray, snapGap) {\n    if (snapGap === void 0) {\n        snapGap = 0;\n    }\n    var closestGapIndex = snapArray.reduce(function(prev, curr, index) {\n        return Math.abs(curr - n) < Math.abs(snapArray[prev] - n) ? index : prev;\n    }, 0);\n    var gap = Math.abs(snapArray[closestGapIndex] - n);\n    return snapGap === 0 || gap < snapGap ? snapArray[closestGapIndex] : n;\n};\nvar getStringSize = function(n) {\n    n = n.toString();\n    if (n === \"auto\") {\n        return n;\n    }\n    if (n.endsWith(\"px\")) {\n        return n;\n    }\n    if (n.endsWith(\"%\")) {\n        return n;\n    }\n    if (n.endsWith(\"vh\")) {\n        return n;\n    }\n    if (n.endsWith(\"vw\")) {\n        return n;\n    }\n    if (n.endsWith(\"vmax\")) {\n        return n;\n    }\n    if (n.endsWith(\"vmin\")) {\n        return n;\n    }\n    return n + \"px\";\n};\nvar getPixelSize = function(size, parentSize, innerWidth, innerHeight) {\n    if (size && typeof size === \"string\") {\n        if (size.endsWith(\"px\")) {\n            return Number(size.replace(\"px\", \"\"));\n        }\n        if (size.endsWith(\"%\")) {\n            var ratio = Number(size.replace(\"%\", \"\")) / 100;\n            return parentSize * ratio;\n        }\n        if (size.endsWith(\"vw\")) {\n            var ratio = Number(size.replace(\"vw\", \"\")) / 100;\n            return innerWidth * ratio;\n        }\n        if (size.endsWith(\"vh\")) {\n            var ratio = Number(size.replace(\"vh\", \"\")) / 100;\n            return innerHeight * ratio;\n        }\n    }\n    return size;\n};\nvar calculateNewMax = function(parentSize, innerWidth, innerHeight, maxWidth, maxHeight, minWidth, minHeight) {\n    maxWidth = getPixelSize(maxWidth, parentSize.width, innerWidth, innerHeight);\n    maxHeight = getPixelSize(maxHeight, parentSize.height, innerWidth, innerHeight);\n    minWidth = getPixelSize(minWidth, parentSize.width, innerWidth, innerHeight);\n    minHeight = getPixelSize(minHeight, parentSize.height, innerWidth, innerHeight);\n    return {\n        maxWidth: typeof maxWidth === \"undefined\" ? undefined : Number(maxWidth),\n        maxHeight: typeof maxHeight === \"undefined\" ? undefined : Number(maxHeight),\n        minWidth: typeof minWidth === \"undefined\" ? undefined : Number(minWidth),\n        minHeight: typeof minHeight === \"undefined\" ? undefined : Number(minHeight)\n    };\n};\nvar definedProps = [\n    \"as\",\n    \"style\",\n    \"className\",\n    \"grid\",\n    \"snap\",\n    \"bounds\",\n    \"boundsByDirection\",\n    \"size\",\n    \"defaultSize\",\n    \"minWidth\",\n    \"minHeight\",\n    \"maxWidth\",\n    \"maxHeight\",\n    \"lockAspectRatio\",\n    \"lockAspectRatioExtraWidth\",\n    \"lockAspectRatioExtraHeight\",\n    \"enable\",\n    \"handleStyles\",\n    \"handleClasses\",\n    \"handleWrapperStyle\",\n    \"handleWrapperClass\",\n    \"children\",\n    \"onResizeStart\",\n    \"onResize\",\n    \"onResizeStop\",\n    \"handleComponent\",\n    \"scale\",\n    \"resizeRatio\",\n    \"snapGap\"\n];\n// HACK: This class is used to calculate % size.\nvar baseClassName = \"__resizable_base__\";\nvar Resizable = /** @class */ function(_super) {\n    __extends(Resizable, _super);\n    function Resizable(props) {\n        var _this = _super.call(this, props) || this;\n        _this.ratio = 1;\n        _this.resizable = null;\n        // For parent boundary\n        _this.parentLeft = 0;\n        _this.parentTop = 0;\n        // For boundary\n        _this.resizableLeft = 0;\n        _this.resizableRight = 0;\n        _this.resizableTop = 0;\n        _this.resizableBottom = 0;\n        // For target boundary\n        _this.targetLeft = 0;\n        _this.targetTop = 0;\n        _this.appendBase = function() {\n            if (!_this.resizable || !_this.window) {\n                return null;\n            }\n            var parent = _this.parentNode;\n            if (!parent) {\n                return null;\n            }\n            var element = _this.window.document.createElement(\"div\");\n            element.style.width = \"100%\";\n            element.style.height = \"100%\";\n            element.style.position = \"absolute\";\n            element.style.transform = \"scale(0, 0)\";\n            element.style.left = \"0\";\n            element.style.flex = \"0 0 100%\";\n            if (element.classList) {\n                element.classList.add(baseClassName);\n            } else {\n                element.className += baseClassName;\n            }\n            parent.appendChild(element);\n            return element;\n        };\n        _this.removeBase = function(base) {\n            var parent = _this.parentNode;\n            if (!parent) {\n                return;\n            }\n            parent.removeChild(base);\n        };\n        _this.ref = function(c) {\n            if (c) {\n                _this.resizable = c;\n            }\n        };\n        _this.state = {\n            isResizing: false,\n            width: typeof (_this.propsSize && _this.propsSize.width) === \"undefined\" ? \"auto\" : _this.propsSize && _this.propsSize.width,\n            height: typeof (_this.propsSize && _this.propsSize.height) === \"undefined\" ? \"auto\" : _this.propsSize && _this.propsSize.height,\n            direction: \"right\",\n            original: {\n                x: 0,\n                y: 0,\n                width: 0,\n                height: 0\n            },\n            backgroundStyle: {\n                height: \"100%\",\n                width: \"100%\",\n                backgroundColor: \"rgba(0,0,0,0)\",\n                cursor: \"auto\",\n                opacity: 0,\n                position: \"fixed\",\n                zIndex: 9999,\n                top: \"0\",\n                left: \"0\",\n                bottom: \"0\",\n                right: \"0\"\n            },\n            flexBasis: undefined\n        };\n        _this.onResizeStart = _this.onResizeStart.bind(_this);\n        _this.onMouseMove = _this.onMouseMove.bind(_this);\n        _this.onMouseUp = _this.onMouseUp.bind(_this);\n        return _this;\n    }\n    Object.defineProperty(Resizable.prototype, \"parentNode\", {\n        get: function() {\n            if (!this.resizable) {\n                return null;\n            }\n            return this.resizable.parentNode;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Resizable.prototype, \"window\", {\n        get: function() {\n            if (!this.resizable) {\n                return null;\n            }\n            if (!this.resizable.ownerDocument) {\n                return null;\n            }\n            return this.resizable.ownerDocument.defaultView;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Resizable.prototype, \"propsSize\", {\n        get: function() {\n            return this.props.size || this.props.defaultSize || DEFAULT_SIZE;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Resizable.prototype, \"size\", {\n        get: function() {\n            var width = 0;\n            var height = 0;\n            if (this.resizable && this.window) {\n                var orgWidth = this.resizable.offsetWidth;\n                var orgHeight = this.resizable.offsetHeight;\n                // HACK: Set position `relative` to get parent size.\n                //       This is because when re-resizable set `absolute`, I can not get base width correctly.\n                var orgPosition = this.resizable.style.position;\n                if (orgPosition !== \"relative\") {\n                    this.resizable.style.position = \"relative\";\n                }\n                // INFO: Use original width or height if set auto.\n                width = this.resizable.style.width !== \"auto\" ? this.resizable.offsetWidth : orgWidth;\n                height = this.resizable.style.height !== \"auto\" ? this.resizable.offsetHeight : orgHeight;\n                // Restore original position\n                this.resizable.style.position = orgPosition;\n            }\n            return {\n                width: width,\n                height: height\n            };\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Resizable.prototype, \"sizeStyle\", {\n        get: function() {\n            var _this = this;\n            var size = this.props.size;\n            var getSize = function(key) {\n                if (typeof _this.state[key] === \"undefined\" || _this.state[key] === \"auto\") {\n                    return \"auto\";\n                }\n                if (_this.propsSize && _this.propsSize[key] && _this.propsSize[key].toString().endsWith(\"%\")) {\n                    if (_this.state[key].toString().endsWith(\"%\")) {\n                        return _this.state[key].toString();\n                    }\n                    var parentSize = _this.getParentSize();\n                    var value = Number(_this.state[key].toString().replace(\"px\", \"\"));\n                    var percent = value / parentSize[key] * 100;\n                    return percent + \"%\";\n                }\n                return getStringSize(_this.state[key]);\n            };\n            var width = size && typeof size.width !== \"undefined\" && !this.state.isResizing ? getStringSize(size.width) : getSize(\"width\");\n            var height = size && typeof size.height !== \"undefined\" && !this.state.isResizing ? getStringSize(size.height) : getSize(\"height\");\n            return {\n                width: width,\n                height: height\n            };\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Resizable.prototype.getParentSize = function() {\n        if (!this.parentNode) {\n            if (!this.window) {\n                return {\n                    width: 0,\n                    height: 0\n                };\n            }\n            return {\n                width: this.window.innerWidth,\n                height: this.window.innerHeight\n            };\n        }\n        var base = this.appendBase();\n        if (!base) {\n            return {\n                width: 0,\n                height: 0\n            };\n        }\n        // INFO: To calculate parent width with flex layout\n        var wrapChanged = false;\n        var wrap = this.parentNode.style.flexWrap;\n        if (wrap !== \"wrap\") {\n            wrapChanged = true;\n            this.parentNode.style.flexWrap = \"wrap\";\n        // HACK: Use relative to get parent padding size\n        }\n        base.style.position = \"relative\";\n        base.style.minWidth = \"100%\";\n        base.style.minHeight = \"100%\";\n        var size = {\n            width: base.offsetWidth,\n            height: base.offsetHeight\n        };\n        if (wrapChanged) {\n            this.parentNode.style.flexWrap = wrap;\n        }\n        this.removeBase(base);\n        return size;\n    };\n    Resizable.prototype.bindEvents = function() {\n        if (this.window) {\n            this.window.addEventListener(\"mouseup\", this.onMouseUp);\n            this.window.addEventListener(\"mousemove\", this.onMouseMove);\n            this.window.addEventListener(\"mouseleave\", this.onMouseUp);\n            this.window.addEventListener(\"touchmove\", this.onMouseMove, {\n                capture: true,\n                passive: false\n            });\n            this.window.addEventListener(\"touchend\", this.onMouseUp);\n        }\n    };\n    Resizable.prototype.unbindEvents = function() {\n        if (this.window) {\n            this.window.removeEventListener(\"mouseup\", this.onMouseUp);\n            this.window.removeEventListener(\"mousemove\", this.onMouseMove);\n            this.window.removeEventListener(\"mouseleave\", this.onMouseUp);\n            this.window.removeEventListener(\"touchmove\", this.onMouseMove, true);\n            this.window.removeEventListener(\"touchend\", this.onMouseUp);\n        }\n    };\n    Resizable.prototype.componentDidMount = function() {\n        if (!this.resizable || !this.window) {\n            return;\n        }\n        var computedStyle = this.window.getComputedStyle(this.resizable);\n        this.setState({\n            width: this.state.width || this.size.width,\n            height: this.state.height || this.size.height,\n            flexBasis: computedStyle.flexBasis !== \"auto\" ? computedStyle.flexBasis : undefined\n        });\n    };\n    Resizable.prototype.componentWillUnmount = function() {\n        if (this.window) {\n            this.unbindEvents();\n        }\n    };\n    Resizable.prototype.createSizeForCssProperty = function(newSize, kind) {\n        var propsSize = this.propsSize && this.propsSize[kind];\n        return this.state[kind] === \"auto\" && this.state.original[kind] === newSize && (typeof propsSize === \"undefined\" || propsSize === \"auto\") ? \"auto\" : newSize;\n    };\n    Resizable.prototype.calculateNewMaxFromBoundary = function(maxWidth, maxHeight) {\n        var boundsByDirection = this.props.boundsByDirection;\n        var direction = this.state.direction;\n        var widthByDirection = boundsByDirection && hasDirection(\"left\", direction);\n        var heightByDirection = boundsByDirection && hasDirection(\"top\", direction);\n        var boundWidth;\n        var boundHeight;\n        if (this.props.bounds === \"parent\") {\n            var parent_1 = this.parentNode;\n            if (parent_1) {\n                boundWidth = widthByDirection ? this.resizableRight - this.parentLeft : parent_1.offsetWidth + (this.parentLeft - this.resizableLeft);\n                boundHeight = heightByDirection ? this.resizableBottom - this.parentTop : parent_1.offsetHeight + (this.parentTop - this.resizableTop);\n            }\n        } else if (this.props.bounds === \"window\") {\n            if (this.window) {\n                boundWidth = widthByDirection ? this.resizableRight : this.window.innerWidth - this.resizableLeft;\n                boundHeight = heightByDirection ? this.resizableBottom : this.window.innerHeight - this.resizableTop;\n            }\n        } else if (this.props.bounds) {\n            boundWidth = widthByDirection ? this.resizableRight - this.targetLeft : this.props.bounds.offsetWidth + (this.targetLeft - this.resizableLeft);\n            boundHeight = heightByDirection ? this.resizableBottom - this.targetTop : this.props.bounds.offsetHeight + (this.targetTop - this.resizableTop);\n        }\n        if (boundWidth && Number.isFinite(boundWidth)) {\n            maxWidth = maxWidth && maxWidth < boundWidth ? maxWidth : boundWidth;\n        }\n        if (boundHeight && Number.isFinite(boundHeight)) {\n            maxHeight = maxHeight && maxHeight < boundHeight ? maxHeight : boundHeight;\n        }\n        return {\n            maxWidth: maxWidth,\n            maxHeight: maxHeight\n        };\n    };\n    Resizable.prototype.calculateNewSizeFromDirection = function(clientX, clientY) {\n        var scale = this.props.scale || 1;\n        var resizeRatio = this.props.resizeRatio || 1;\n        var _a = this.state, direction = _a.direction, original = _a.original;\n        var _b = this.props, lockAspectRatio = _b.lockAspectRatio, lockAspectRatioExtraHeight = _b.lockAspectRatioExtraHeight, lockAspectRatioExtraWidth = _b.lockAspectRatioExtraWidth;\n        var newWidth = original.width;\n        var newHeight = original.height;\n        var extraHeight = lockAspectRatioExtraHeight || 0;\n        var extraWidth = lockAspectRatioExtraWidth || 0;\n        if (hasDirection(\"right\", direction)) {\n            newWidth = original.width + (clientX - original.x) * resizeRatio / scale;\n            if (lockAspectRatio) {\n                newHeight = (newWidth - extraWidth) / this.ratio + extraHeight;\n            }\n        }\n        if (hasDirection(\"left\", direction)) {\n            newWidth = original.width - (clientX - original.x) * resizeRatio / scale;\n            if (lockAspectRatio) {\n                newHeight = (newWidth - extraWidth) / this.ratio + extraHeight;\n            }\n        }\n        if (hasDirection(\"bottom\", direction)) {\n            newHeight = original.height + (clientY - original.y) * resizeRatio / scale;\n            if (lockAspectRatio) {\n                newWidth = (newHeight - extraHeight) * this.ratio + extraWidth;\n            }\n        }\n        if (hasDirection(\"top\", direction)) {\n            newHeight = original.height - (clientY - original.y) * resizeRatio / scale;\n            if (lockAspectRatio) {\n                newWidth = (newHeight - extraHeight) * this.ratio + extraWidth;\n            }\n        }\n        return {\n            newWidth: newWidth,\n            newHeight: newHeight\n        };\n    };\n    Resizable.prototype.calculateNewSizeFromAspectRatio = function(newWidth, newHeight, max, min) {\n        var _a = this.props, lockAspectRatio = _a.lockAspectRatio, lockAspectRatioExtraHeight = _a.lockAspectRatioExtraHeight, lockAspectRatioExtraWidth = _a.lockAspectRatioExtraWidth;\n        var computedMinWidth = typeof min.width === \"undefined\" ? 10 : min.width;\n        var computedMaxWidth = typeof max.width === \"undefined\" || max.width < 0 ? newWidth : max.width;\n        var computedMinHeight = typeof min.height === \"undefined\" ? 10 : min.height;\n        var computedMaxHeight = typeof max.height === \"undefined\" || max.height < 0 ? newHeight : max.height;\n        var extraHeight = lockAspectRatioExtraHeight || 0;\n        var extraWidth = lockAspectRatioExtraWidth || 0;\n        if (lockAspectRatio) {\n            var extraMinWidth = (computedMinHeight - extraHeight) * this.ratio + extraWidth;\n            var extraMaxWidth = (computedMaxHeight - extraHeight) * this.ratio + extraWidth;\n            var extraMinHeight = (computedMinWidth - extraWidth) / this.ratio + extraHeight;\n            var extraMaxHeight = (computedMaxWidth - extraWidth) / this.ratio + extraHeight;\n            var lockedMinWidth = Math.max(computedMinWidth, extraMinWidth);\n            var lockedMaxWidth = Math.min(computedMaxWidth, extraMaxWidth);\n            var lockedMinHeight = Math.max(computedMinHeight, extraMinHeight);\n            var lockedMaxHeight = Math.min(computedMaxHeight, extraMaxHeight);\n            newWidth = clamp(newWidth, lockedMinWidth, lockedMaxWidth);\n            newHeight = clamp(newHeight, lockedMinHeight, lockedMaxHeight);\n        } else {\n            newWidth = clamp(newWidth, computedMinWidth, computedMaxWidth);\n            newHeight = clamp(newHeight, computedMinHeight, computedMaxHeight);\n        }\n        return {\n            newWidth: newWidth,\n            newHeight: newHeight\n        };\n    };\n    Resizable.prototype.setBoundingClientRect = function() {\n        // For parent boundary\n        if (this.props.bounds === \"parent\") {\n            var parent_2 = this.parentNode;\n            if (parent_2) {\n                var parentRect = parent_2.getBoundingClientRect();\n                this.parentLeft = parentRect.left;\n                this.parentTop = parentRect.top;\n            }\n        }\n        // For target(html element) boundary\n        if (this.props.bounds && typeof this.props.bounds !== \"string\") {\n            var targetRect = this.props.bounds.getBoundingClientRect();\n            this.targetLeft = targetRect.left;\n            this.targetTop = targetRect.top;\n        }\n        // For boundary\n        if (this.resizable) {\n            var _a = this.resizable.getBoundingClientRect(), left = _a.left, top_1 = _a.top, right = _a.right, bottom = _a.bottom;\n            this.resizableLeft = left;\n            this.resizableRight = right;\n            this.resizableTop = top_1;\n            this.resizableBottom = bottom;\n        }\n    };\n    Resizable.prototype.onResizeStart = function(event, direction) {\n        if (!this.resizable || !this.window) {\n            return;\n        }\n        var clientX = 0;\n        var clientY = 0;\n        if (event.nativeEvent && isMouseEvent(event.nativeEvent)) {\n            clientX = event.nativeEvent.clientX;\n            clientY = event.nativeEvent.clientY;\n        } else if (event.nativeEvent && isTouchEvent(event.nativeEvent)) {\n            clientX = event.nativeEvent.touches[0].clientX;\n            clientY = event.nativeEvent.touches[0].clientY;\n        }\n        if (this.props.onResizeStart) {\n            if (this.resizable) {\n                var startResize = this.props.onResizeStart(event, direction, this.resizable);\n                if (startResize === false) {\n                    return;\n                }\n            }\n        }\n        // Fix #168\n        if (this.props.size) {\n            if (typeof this.props.size.height !== \"undefined\" && this.props.size.height !== this.state.height) {\n                this.setState({\n                    height: this.props.size.height\n                });\n            }\n            if (typeof this.props.size.width !== \"undefined\" && this.props.size.width !== this.state.width) {\n                this.setState({\n                    width: this.props.size.width\n                });\n            }\n        }\n        // For lockAspectRatio case\n        this.ratio = typeof this.props.lockAspectRatio === \"number\" ? this.props.lockAspectRatio : this.size.width / this.size.height;\n        var flexBasis;\n        var computedStyle = this.window.getComputedStyle(this.resizable);\n        if (computedStyle.flexBasis !== \"auto\") {\n            var parent_3 = this.parentNode;\n            if (parent_3) {\n                var dir = this.window.getComputedStyle(parent_3).flexDirection;\n                this.flexDir = dir.startsWith(\"row\") ? \"row\" : \"column\";\n                flexBasis = computedStyle.flexBasis;\n            }\n        }\n        // For boundary\n        this.setBoundingClientRect();\n        this.bindEvents();\n        var state = {\n            original: {\n                x: clientX,\n                y: clientY,\n                width: this.size.width,\n                height: this.size.height\n            },\n            isResizing: true,\n            backgroundStyle: __assign(__assign({}, this.state.backgroundStyle), {\n                cursor: this.window.getComputedStyle(event.target).cursor || \"auto\"\n            }),\n            direction: direction,\n            flexBasis: flexBasis\n        };\n        this.setState(state);\n    };\n    Resizable.prototype.onMouseMove = function(event) {\n        var _this = this;\n        if (!this.state.isResizing || !this.resizable || !this.window) {\n            return;\n        }\n        if (this.window.TouchEvent && isTouchEvent(event)) {\n            try {\n                event.preventDefault();\n                event.stopPropagation();\n            } catch (e) {\n            // Ignore on fail\n            }\n        }\n        var _a = this.props, maxWidth = _a.maxWidth, maxHeight = _a.maxHeight, minWidth = _a.minWidth, minHeight = _a.minHeight;\n        var clientX = isTouchEvent(event) ? event.touches[0].clientX : event.clientX;\n        var clientY = isTouchEvent(event) ? event.touches[0].clientY : event.clientY;\n        var _b = this.state, direction = _b.direction, original = _b.original, width = _b.width, height = _b.height;\n        var parentSize = this.getParentSize();\n        var max = calculateNewMax(parentSize, this.window.innerWidth, this.window.innerHeight, maxWidth, maxHeight, minWidth, minHeight);\n        maxWidth = max.maxWidth;\n        maxHeight = max.maxHeight;\n        minWidth = max.minWidth;\n        minHeight = max.minHeight;\n        // Calculate new size\n        var _c = this.calculateNewSizeFromDirection(clientX, clientY), newHeight = _c.newHeight, newWidth = _c.newWidth;\n        // Calculate max size from boundary settings\n        var boundaryMax = this.calculateNewMaxFromBoundary(maxWidth, maxHeight);\n        if (this.props.snap && this.props.snap.x) {\n            newWidth = findClosestSnap(newWidth, this.props.snap.x, this.props.snapGap);\n        }\n        if (this.props.snap && this.props.snap.y) {\n            newHeight = findClosestSnap(newHeight, this.props.snap.y, this.props.snapGap);\n        }\n        // Calculate new size from aspect ratio\n        var newSize = this.calculateNewSizeFromAspectRatio(newWidth, newHeight, {\n            width: boundaryMax.maxWidth,\n            height: boundaryMax.maxHeight\n        }, {\n            width: minWidth,\n            height: minHeight\n        });\n        newWidth = newSize.newWidth;\n        newHeight = newSize.newHeight;\n        if (this.props.grid) {\n            var newGridWidth = snap(newWidth, this.props.grid[0]);\n            var newGridHeight = snap(newHeight, this.props.grid[1]);\n            var gap = this.props.snapGap || 0;\n            newWidth = gap === 0 || Math.abs(newGridWidth - newWidth) <= gap ? newGridWidth : newWidth;\n            newHeight = gap === 0 || Math.abs(newGridHeight - newHeight) <= gap ? newGridHeight : newHeight;\n        }\n        var delta = {\n            width: newWidth - original.width,\n            height: newHeight - original.height\n        };\n        if (width && typeof width === \"string\") {\n            if (width.endsWith(\"%\")) {\n                var percent = newWidth / parentSize.width * 100;\n                newWidth = percent + \"%\";\n            } else if (width.endsWith(\"vw\")) {\n                var vw = newWidth / this.window.innerWidth * 100;\n                newWidth = vw + \"vw\";\n            } else if (width.endsWith(\"vh\")) {\n                var vh = newWidth / this.window.innerHeight * 100;\n                newWidth = vh + \"vh\";\n            }\n        }\n        if (height && typeof height === \"string\") {\n            if (height.endsWith(\"%\")) {\n                var percent = newHeight / parentSize.height * 100;\n                newHeight = percent + \"%\";\n            } else if (height.endsWith(\"vw\")) {\n                var vw = newHeight / this.window.innerWidth * 100;\n                newHeight = vw + \"vw\";\n            } else if (height.endsWith(\"vh\")) {\n                var vh = newHeight / this.window.innerHeight * 100;\n                newHeight = vh + \"vh\";\n            }\n        }\n        var newState = {\n            width: this.createSizeForCssProperty(newWidth, \"width\"),\n            height: this.createSizeForCssProperty(newHeight, \"height\")\n        };\n        if (this.flexDir === \"row\") {\n            newState.flexBasis = newState.width;\n        } else if (this.flexDir === \"column\") {\n            newState.flexBasis = newState.height;\n        }\n        // For v18, update state sync\n        (0,react_dom__WEBPACK_IMPORTED_MODULE_1__.flushSync)(function() {\n            _this.setState(newState);\n        });\n        if (this.props.onResize) {\n            this.props.onResize(event, direction, this.resizable, delta);\n        }\n    };\n    Resizable.prototype.onMouseUp = function(event) {\n        var _a = this.state, isResizing = _a.isResizing, direction = _a.direction, original = _a.original;\n        if (!isResizing || !this.resizable) {\n            return;\n        }\n        var delta = {\n            width: this.size.width - original.width,\n            height: this.size.height - original.height\n        };\n        if (this.props.onResizeStop) {\n            this.props.onResizeStop(event, direction, this.resizable, delta);\n        }\n        if (this.props.size) {\n            this.setState(this.props.size);\n        }\n        this.unbindEvents();\n        this.setState({\n            isResizing: false,\n            backgroundStyle: __assign(__assign({}, this.state.backgroundStyle), {\n                cursor: \"auto\"\n            })\n        });\n    };\n    Resizable.prototype.updateSize = function(size) {\n        this.setState({\n            width: size.width,\n            height: size.height\n        });\n    };\n    Resizable.prototype.renderResizer = function() {\n        var _this = this;\n        var _a = this.props, enable = _a.enable, handleStyles = _a.handleStyles, handleClasses = _a.handleClasses, handleWrapperStyle = _a.handleWrapperStyle, handleWrapperClass = _a.handleWrapperClass, handleComponent = _a.handleComponent;\n        if (!enable) {\n            return null;\n        }\n        var resizers = Object.keys(enable).map(function(dir) {\n            if (enable[dir] !== false) {\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_resizer__WEBPACK_IMPORTED_MODULE_2__.Resizer, {\n                    key: dir,\n                    direction: dir,\n                    onResizeStart: _this.onResizeStart,\n                    replaceStyles: handleStyles && handleStyles[dir],\n                    className: handleClasses && handleClasses[dir]\n                }, handleComponent && handleComponent[dir] ? handleComponent[dir] : null);\n            }\n            return null;\n        });\n        // #93 Wrap the resize box in span (will not break 100% width/height)\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n            className: handleWrapperClass,\n            style: handleWrapperStyle\n        }, resizers);\n    };\n    Resizable.prototype.render = function() {\n        var _this = this;\n        var extendsProps = Object.keys(this.props).reduce(function(acc, key) {\n            if (definedProps.indexOf(key) !== -1) {\n                return acc;\n            }\n            acc[key] = _this.props[key];\n            return acc;\n        }, {});\n        var style = __assign(__assign(__assign({\n            position: \"relative\",\n            userSelect: this.state.isResizing ? \"none\" : \"auto\"\n        }, this.props.style), this.sizeStyle), {\n            maxWidth: this.props.maxWidth,\n            maxHeight: this.props.maxHeight,\n            minWidth: this.props.minWidth,\n            minHeight: this.props.minHeight,\n            boxSizing: \"border-box\",\n            flexShrink: 0\n        });\n        if (this.state.flexBasis) {\n            style.flexBasis = this.state.flexBasis;\n        }\n        var Wrapper = this.props.as || \"div\";\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Wrapper, __assign({\n            ref: this.ref,\n            style: style,\n            className: this.props.className\n        }, extendsProps), this.state.isResizing && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n            style: this.state.backgroundStyle\n        }), this.props.children, this.renderResizer());\n    };\n    Resizable.defaultProps = {\n        as: \"div\",\n        onResizeStart: function() {},\n        onResize: function() {},\n        onResizeStop: function() {},\n        enable: {\n            top: true,\n            right: true,\n            bottom: true,\n            left: true,\n            topRight: true,\n            bottomRight: true,\n            bottomLeft: true,\n            topLeft: true\n        },\n        style: {},\n        grid: [\n            1,\n            1\n        ],\n        lockAspectRatio: false,\n        lockAspectRatioExtraWidth: 0,\n        lockAspectRatioExtraHeight: 0,\n        scale: 1,\n        resizeRatio: 1,\n        snapGap: 0\n    };\n    return Resizable;\n}(react__WEBPACK_IMPORTED_MODULE_0__.PureComponent);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/re-resizable@6.9.11_react-dom@18.2.0_react@18.2.0/node_modules/re-resizable/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/re-resizable@6.9.11_react-dom@18.2.0_react@18.2.0/node_modules/re-resizable/lib/resizer.js":
/*!***********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/re-resizable@6.9.11_react-dom@18.2.0_react@18.2.0/node_modules/re-resizable/lib/resizer.js ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Resizer: () => (/* binding */ Resizer)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/.pnpm/next@14.0.4_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\nvar __extends = undefined && undefined.__extends || function() {\n    var extendStatics = function(d, b) {\n        extendStatics = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(d, b) {\n            d.__proto__ = b;\n        } || function(d, b) {\n            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n        };\n        return extendStatics(d, b);\n    };\n    return function(d, b) {\n        extendStatics(d, b);\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n}();\nvar __assign = undefined && undefined.__assign || function() {\n    __assign = Object.assign || function(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\n\nvar rowSizeBase = {\n    width: \"100%\",\n    height: \"10px\",\n    top: \"0px\",\n    left: \"0px\",\n    cursor: \"row-resize\"\n};\nvar colSizeBase = {\n    width: \"10px\",\n    height: \"100%\",\n    top: \"0px\",\n    left: \"0px\",\n    cursor: \"col-resize\"\n};\nvar edgeBase = {\n    width: \"20px\",\n    height: \"20px\",\n    position: \"absolute\"\n};\nvar styles = {\n    top: __assign(__assign({}, rowSizeBase), {\n        top: \"-5px\"\n    }),\n    right: __assign(__assign({}, colSizeBase), {\n        left: undefined,\n        right: \"-5px\"\n    }),\n    bottom: __assign(__assign({}, rowSizeBase), {\n        top: undefined,\n        bottom: \"-5px\"\n    }),\n    left: __assign(__assign({}, colSizeBase), {\n        left: \"-5px\"\n    }),\n    topRight: __assign(__assign({}, edgeBase), {\n        right: \"-10px\",\n        top: \"-10px\",\n        cursor: \"ne-resize\"\n    }),\n    bottomRight: __assign(__assign({}, edgeBase), {\n        right: \"-10px\",\n        bottom: \"-10px\",\n        cursor: \"se-resize\"\n    }),\n    bottomLeft: __assign(__assign({}, edgeBase), {\n        left: \"-10px\",\n        bottom: \"-10px\",\n        cursor: \"sw-resize\"\n    }),\n    topLeft: __assign(__assign({}, edgeBase), {\n        left: \"-10px\",\n        top: \"-10px\",\n        cursor: \"nw-resize\"\n    })\n};\nvar Resizer = /** @class */ function(_super) {\n    __extends(Resizer, _super);\n    function Resizer() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.onMouseDown = function(e) {\n            _this.props.onResizeStart(e, _this.props.direction);\n        };\n        _this.onTouchStart = function(e) {\n            _this.props.onResizeStart(e, _this.props.direction);\n        };\n        return _this;\n    }\n    Resizer.prototype.render = function() {\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n            className: this.props.className || \"\",\n            style: __assign(__assign({\n                position: \"absolute\",\n                userSelect: \"none\"\n            }, styles[this.props.direction]), this.props.replaceStyles || {}),\n            onMouseDown: this.onMouseDown,\n            onTouchStart: this.onTouchStart\n        }, this.props.children);\n    };\n    return Resizer;\n}(react__WEBPACK_IMPORTED_MODULE_0__.PureComponent);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/re-resizable@6.9.11_react-dom@18.2.0_react@18.2.0/node_modules/re-resizable/lib/resizer.js\n");

/***/ })

};
;